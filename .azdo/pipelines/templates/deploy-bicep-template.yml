# ----------------------------------------------------------------------------------------------------
# Template to deploy Azure Resources in a bicep file in one environment
# This template is optimized for a Linux build agent -- see create-infra-win.yml for a Windows build agent
# ----------------------------------------------------------------------------------------------------
parameters:
- name: environmentName
  default: 'DEV'
- name: templateFolderName
  default: 'infra/Bicep'
- name: templateFileName
  default: 'main.bicep'
- name: parameterFileName
  default: 'main.bicepparam'
- name: deploymentMode
  default: 'Incremental'  # 'Incremental' | 'Complete' | 'Validation'
- name: parseBicepOutputs
  default: false

# ----------------------------------------------------------------------------------------------------
jobs:
- deployment: CreateInfra
  displayName: Initialize Create Infra
  environment: ${{ parameters.environmentName }}

- job: CreateInfraJob
  displayName: Create Infrastructure
  variables:
    - name: environmentName
      value: ${{ parameters.environmentName }}
    - name: environmentNameUpper
      value: ${{ upper(parameters.environmentName) }}
    - name: environmentNameLower
      value: ${{ lower(parameters.environmentName) }}
    - name: templateFile
      value: '$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.templateFileName }}'
    - name: parameterFile
      value: '$(Pipeline.Workspace)/s/${{ parameters.templateFolderName }}/${{ parameters.parameterFileName }}'

    # Bring in environment common variable file
    #- template: ../vars/var-service-connections.yml
    - template: ../vars/var-common.yml
    
    # Bring in environment specific variable files
    - ${{ if eq(lower(parameters.environmentName), 'dev') }}:
      - template: ../vars/var-dev.yml
    - ${{ if eq(lower(parameters.environmentName), 'qa') }}:
      - template: ../vars/var-qa.yml
    - ${{ if eq(lower(parameters.environmentName), 'prod') }}:
      - template: ../vars/var-prod.yml

  # ----------------------------------------------------------------------------------------------------
  steps:
  - task: PowerShell@2
    displayName: Create Variables
    inputs:
      targetType: 'inline'
      script: |
        $environmentNameLower="${{ parameters.environmentName }}".ToLower()
        echo "##vso[task.setvariable variable=environmentNameLower]$environmentNameLower"

        $resourceGroupNameWithEnvSuffix="$(resourceGroupPrefix)-$environmentNameLower".ToLower()
        $resourceGroupName="$(resourceGroupPrefix)".ToLower()
        echo "##vso[task.setvariable variable=resourceGroupName]$resourceGroupName"

        $runDateTime=(Get-Date).ToString("yyyyMMdd-HHmmss")
        echo "##vso[task.setvariable variable=runDateTime]$runDateTime"
        $runDateTimeZ=(Get-Date).ToString("yyyyMMddTHHmmss")+"Z"
        echo "##vso[task.setvariable variable=runDateTimeZ]$runDateTimeZ"

  - task: PowerShell@2
    displayName: Display Variables and Files
    continueOnError: true
    inputs:
      targetType: 'inline'
      script: |
        echo "environmentName=${{ parameters.environmentName }}"
        echo "templateFolderName=${{ parameters.templateFolderName }}"
        echo "templateFileName=${{ parameters.templateFileName }}"
        echo "templateFile=$(templateFile)"
        echo "parameterFileName=${{ parameters.parameterFileName }}"
        echo "parameterFile=$(parameterFile)"
        echo "deploymentMode=${{ parameters.deploymentMode }}"
        echo "resourceGroupName=$(resourceGroupName)"
        echo "runDateTime=$(runDateTime)"
        echo "runDateTimeZ=$(runDateTimeZ)"

        echo "##[group]Display All Environment Variables:"
        Get-ChildItem -Path Env:\ | Format-List
        echo "this doesn't work...!  printenv | sort"
        echo "##[endgroup]"

        echo "----------------------------------------"
        echo "##[group]Directory of pipeline workspace:"
        Get-ChildItem -Path $(Pipeline.Workspace) -Recurse
        echo "##[endgroup]"

  - ${{ if eq(variables.environmentNameUpper, 'DEV') }}:
    - template: steps-deploy-bicep-template.yml
      parameters:
        serviceConnectionName: $(serviceConnectionDEV)
        parseBicepOutputs: ${{ parameters.parseBicepOutputs }}
  - ${{ if eq(variables.environmentNameUpper, 'QA') }}:
    - template: steps-deploy-bicep-template.yml
      parameters:
        serviceConnectionName: $(serviceConnectionQA)
        parseBicepOutputs: ${{ parameters.parseBicepOutputs }}
  - ${{ if eq(variables.environmentNameUpper, 'PROD') }}:
    - template: steps-deploy-bicep-template.yml
      parameters:
        serviceConnectionName: $(serviceConnectionPROD)
        parseBicepOutputs: ${{ parameters.parseBicepOutputs }}

  # Be sure to set the "parseBicepOutputs: true" on the template above to get the outputs
  - task: CmdLine@2
    displayName: Display Bicep Outputs
    continueOnError: true
    inputs:
      script: |
        echo "SUBSCRIPTION_ID:     $(bicepOutputs-SUBSCRIPTION_ID)"
        echo "RESOURCE_GROUP_NAME: $(bicepOutputs-RESOURCE_GROUP_NAME)"
        echo "WORKSPACE_NAME:      $(bicepOutputs-WORKSPACE_NAME)"
        echo "All Bicep Outputs: $(bicepOutputs)"

  - task: CmdLine@2
    inputs:
      script: |
        echo "WIPED!" > $(parameterFile)
    displayName: 'Wipe Parameter File'
    condition: always()
    continueOnError: true
